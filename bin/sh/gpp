#!/usr/bin/env zsh

# NOTE: 用于简化 commit -> git push

emulate -LR zsh
set -e
# set -x

autoload -Uz hlcolor && hlcolor
# source "${0:a:h}/basic/color"

currentBranch=$(git branch --show-current)
remoteBranch="origin/${currentBranch}"

function addChanges() {
    # use 'local' to avoid exit from error code
    local CHANGES="$(git status --porcelain)"
    local CHANGES_NUM="$(echo -n $CHANGES | grep -c '^')"
    # if [[ `git status --porcelain` ]]; then  # have changes
    if [[ "$CHANGES_NUM" -gt 0 ]]; then # have changes
        info "Add All Changes"
        echo "$CHANGES"
        git add -A

        info "Commit"
        git commit -m "daily $(date "+%Y-%m-%d")"
    else # No changes
        error "No Changes!!!"
        exit 1
    fi
}

function fetch() {
    info "Fetch"
    git fetch --all --prune || (
        error "Can't Fetch!!!"
        exit 1
    )
}

function rebase() {
    # 获得远程默认分支, master 或 main
    # defaultBranch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') # 这种方法有可能得到 `fatal: ref refs/remotes/origin/HEAD is not a symbolic ref`
    # defaultBranch=$(git branch | grep -o -m1 "\b\(master\|main\)\b") # -o: print only the match, -m1: print only the first match

    if git branch -a --contains "${remoteBranch}" &>/dev/null; then # 有远程分支
        info "Pull Rebase"
        git rebase "${remoteBranch}" || (
            error "Can't Rebase!!!"
            exit 1
        )
    fi
}

function push() {
    info "Push"
    if git branch -a --contains "${remoteBranch}" &>/dev/null; then # 有远程分支
        git push || (
            error "Can't Push!!!"
            exit 1
        )
    else
        git push -u origin HEAD || (
            error "Can't Push!!!"
            exit 1
        )
    fi
}

addChanges && fetch && rebase && push

success "Done"
