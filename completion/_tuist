#compdef tuist
local context state state_descr line
_tuist_commandname=$words[1]
typeset -A opt_args

_tuist() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'init:Bootstraps a project'
                'build:Builds a project'
                'cache:Warms the local and remote cache.'
                'clean:Clean all the artifacts stored locally'
                'dump:Outputs the manifest as a JSON'
                'edit:Generates a temporary project to edit the project in the current directory'
                'generate:Generates an Xcode workspace to start working on the project.'
                'graph:Generates a graph from the workspace or project in the current directory'
                'install:Installs any remote content (e.g. dependencies) necessary to interact with the project.'
                'migration:A set of utilities to assist in the migration of Xcode projects to Tuist.'
                'plugin:A set of commands for plugin'"'"'s management.'
                'run:Runs a scheme or target in the project'
                'scaffold:Generates new project based on a template'
                'test:Tests a project'
                'share:Generate a link to share your app. Only simulator builds supported.'
                'project:A set of commands to manage your Tuist projects.'
                'organization:A set of commands to manage your Tuist organizations.'
                'auth:Authenticates the user'
                'session:Prints the current Tuist session'
                'logout:Removes an existing Tuist session.'
                'help:Show subcommand help information.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (init)
                    _tuist_init
                    ;;
                (build)
                    _tuist_build
                    ;;
                (cache)
                    _tuist_cache
                    ;;
                (clean)
                    _tuist_clean
                    ;;
                (dump)
                    _tuist_dump
                    ;;
                (edit)
                    _tuist_edit
                    ;;
                (generate)
                    _tuist_generate
                    ;;
                (graph)
                    _tuist_graph
                    ;;
                (install)
                    _tuist_install
                    ;;
                (migration)
                    _tuist_migration
                    ;;
                (plugin)
                    _tuist_plugin
                    ;;
                (run)
                    _tuist_run
                    ;;
                (scaffold)
                    _tuist_scaffold
                    ;;
                (test)
                    _tuist_test
                    ;;
                (share)
                    _tuist_share
                    ;;
                (project)
                    _tuist_project
                    ;;
                (organization)
                    _tuist_organization
                    ;;
                (auth)
                    _tuist_auth
                    ;;
                (session)
                    _tuist_session
                    ;;
                (logout)
                    _tuist_logout
                    ;;
                (help)
                    _tuist_help
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_init() {
    integer ret=1
    local -a args
    args+=(
        '--platform[The platform (iOS, tvOS, visionOS, watchOS or macOS) the product will be for (Default: iOS) (env: TUIST_INIT_PLATFORM)]:platform:(iOS tvOS macOS visionOS watchOS)'
        '(--name -n)'{--name,-n}'[The name of the project. (Default: Name of the current directory) (env: TUIST_INIT_NAME)]:name:'
        '(--template -t)'{--template,-t}'[The name of the template to use (you can list available templates with tuist scaffold list) (env: TUIST_INIT_TEMPLATE)]:template:'
        '(--path -p)'{--path,-p}'[The path to the folder where the project will be generated. (Default: Current directory) (env: TUIST_INIT_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_build() {
    integer ret=1
    local -a args
    args+=(
        ':scheme:'
        '--generate[Force the generation of the project before building. (env: TUIST_BUILD_OPTIONS_GENERATE)]'
        '--no-generate[Force the generation of the project before building. (env: TUIST_BUILD_OPTIONS_GENERATE)]'
        '--clean[When passed, it cleans the project before building it (env: TUIST_BUILD_OPTIONS_CLEAN)]'
        '--no-clean[When passed, it cleans the project before building it (env: TUIST_BUILD_OPTIONS_CLEAN)]'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project to be built. (env: TUIST_BUILD_OPTIONS_PATH)]:path:_files -/'
        '(--device -d)'{--device,-d}'[Build on a specific device. (env: TUIST_BUILD_OPTIONS_DEVICE)]:device:'
        '--platform[Build for a specific platform. (env: TUIST_BUILD_OPTIONS_PLATFORM)]:platform:(ios macos tvos watchos visionos)'
        '(--os -o)'{--os,-o}'[Build with a specific version of the OS. (env: TUIST_BUILD_OPTIONS_OS)]:os:'
        '--rosetta[When passed, append arch=x86_64 to the '"'"'destination'"'"' to run simulator in a Rosetta mode. (env: TUIST_BUILD_OPTIONS_ROSETTA)]'
        '--no-rosetta[When passed, append arch=x86_64 to the '"'"'destination'"'"' to run simulator in a Rosetta mode. (env: TUIST_BUILD_OPTIONS_ROSETTA)]'
        '(--configuration -C)'{--configuration,-C}'[The configuration to be used when building the scheme. (env: TUIST_BUILD_OPTIONS_CONFIGURATION)]:configuration:'
        '--build-output-path[The directory where build products will be copied to when the project is built. (env: TUIST_BUILD_OPTIONS_BUILD_OUTPUT_PATH)]:build-output-path:_files -/'
        '--derived-data-path[\[Deprecated\] Overrides the folder that should be used for derived data when building the project. (env: TUIST_BUILD_OPTIONS_DERIVED_DATA_PATH)]:derived-data-path:'
        '--generate-only[When passed, it generates the project and skips building. This is useful for debugging purposes. (env: TUIST_BUILD_OPTIONS_GENERATE_ONLY)]'
        '--no-generate-only[When passed, it generates the project and skips building. This is useful for debugging purposes. (env: TUIST_BUILD_OPTIONS_GENERATE_ONLY)]'
        ':passthrough-xcode-build-arguments:'
        '--binary-cache[Ignore binary cache and use sources only. (env: TUIST_BUILD_BINARY_CACHE)]'
        '--no-binary-cache[Ignore binary cache and use sources only. (env: TUIST_BUILD_BINARY_CACHE)]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_cache() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project whose targets will be cached.]:path:_files -/'
        '(--configuration -c)'{--configuration,-c}'[Configuration to use for binary caching.]:configuration:'
        ':targets:'
        '--external-only[If passed, the command doesn'"'"'t cache the targets passed in the `--targets` argument, but only their dependencies]'
        '--generate-only[When passed, it generates the project and skips warming the cache. This is useful for debugging purposes.]'
        '--print-hashes[When passed, the hashes of the cacheable frameworks in the given project are printed.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_clean() {
    integer ret=1
    local -a args
    args+=(
        ':clean-categories:(plugins generatedAutomationProjects projectDescriptionHelpers manifests editProjects runs binaries selectiveTests dependencies)'
        '--remote[Clean the remote cache (env: TUIST_CLEAN_REMOTE)]'
        '--no-remote[Clean the remote cache (env: TUIST_CLEAN_REMOTE)]'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project that should be cleaned. (env: TUIST_CLEAN_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_dump() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the folder where the manifest is (env: TUIST_DUMP_PATH)]:path:_files -/'
        ':manifest:(project workspace config template plugin package)'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_edit() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory whose project will be edited (env: TUIST_EDIT_PATH)]:path:_files -/'
        '(--permanent -P)'{--permanent,-P}'[It creates the project in the current directory or the one indicated by -p and doesn'"'"'t block the process (env: TUIST_EDIT_PERMANENT)]'
        '--no-permanent[It creates the project in the current directory or the one indicated by -p and doesn'"'"'t block the process (env: TUIST_EDIT_PERMANENT)]'
        '(--only-current-directory -o)'{--only-current-directory,-o}'[It only includes the manifest in the current directory. (env: TUIST_EDIT_ONLY_CURRENT_DIRECTORY)]'
        '--no-only-current-directory[It only includes the manifest in the current directory. (env: TUIST_EDIT_ONLY_CURRENT_DIRECTORY)]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_generate() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_GENERATE_PATH)]:path:_files -/'
        ':sources:'
        '(--open -o)'{--open,-o}'[Don'"'"'t open the project after generating it. (env: TUIST_GENERATE_OPEN)]'
        '--no-open[Don'"'"'t open the project after generating it. (env: TUIST_GENERATE_OPEN)]'
        '--binary-cache[Ignore binary cache and use sources only. (env: TUIST_GENERATE_BINARY_CACHE)]'
        '--no-binary-cache[Ignore binary cache and use sources only. (env: TUIST_GENERATE_BINARY_CACHE)]'
        '(--configuration -c)'{--configuration,-c}'[Configuration to generate for.]:configuration:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_graph() {
    integer ret=1
    local -a args
    args+=(
        '(-t --skip-test-targets)'{-t,--skip-test-targets}'[Skip Test targets during graph rendering. (env: TUIST_GRAPH_SKIP_TEST_TARGETS)]'
        '--no-skip-test-targets[Skip Test targets during graph rendering. (env: TUIST_GRAPH_SKIP_TEST_TARGETS)]'
        '(-d --skip-external-dependencies)'{-d,--skip-external-dependencies}'[Skip external dependencies. (env: TUIST_GRAPH_SKIP_EXTERNAL_DEPENDENCIES)]'
        '--no-skip-external-dependencies[Skip external dependencies. (env: TUIST_GRAPH_SKIP_EXTERNAL_DEPENDENCIES)]'
        '(-l --platform)'{-l,--platform}'[A platform to filter. Only targets for this platform will be showed in the graph. Available platforms: ios, macos, tvos, watchos (env: TUIST_GRAPH_PLATFORM)]:platform:(ios macos tvos watchos visionos)'
        '(-f --format)'{-f,--format}'[Available formats: dot, json, png, svg (env: TUIST_GRAPH_FORMAT)]:format:(dot json png svg)'
        '--open[Don'"'"'t open the file after generating it. (env: TUIST_GRAPH_OPEN)]'
        '--no-open[Don'"'"'t open the file after generating it. (env: TUIST_GRAPH_OPEN)]'
        '(-a --algorithm)'{-a,--algorithm}'[Available formats: dot, neato, twopi, circo, fdp, sfdp, patchwork (env: TUIST_GRAPH_LAYOUT_ALGORITHM)]:algorithm:'
        ':targets:'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project whose targets will be cached. (env: TUIST_GRAPH_PATH)]:path:_files -/'
        '(--output-path -o)'{--output-path,-o}'[The path where the graph will be generated. (env: TUIST_GRAPH_OUTPUT_PATH)]:output-path:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_install() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_INSTALL_PATH)]:path:_files -/'
        '(--update -u)'{--update,-u}'[Instead of simple install, update external content when available. (env: TUIST_INSTALL_UPDATE)]'
        '--no-update[Instead of simple install, update external content when available. (env: TUIST_INSTALL_UPDATE)]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_migration() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'settings-to-xcconfig:It extracts the build settings from a project or a target into an xcconfig file.'
                'check-empty-settings:It checks if the build settings of a project or target are empty. Otherwise it exits unsuccessfully.'
                'list-targets:It lists the targets of a project sorted by number of dependencies.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (settings-to-xcconfig)
                    _tuist_migration_settings-to-xcconfig
                    ;;
                (check-empty-settings)
                    _tuist_migration_check-empty-settings
                    ;;
                (list-targets)
                    _tuist_migration_list-targets
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_migration_settings-to-xcconfig() {
    integer ret=1
    local -a args
    args+=(
        '(-p --xcodeproj-path)'{-p,--xcodeproj-path}'[The path to the Xcode project (env: TUIST_MIGRATION_SETTINGS_TO_XCCONFIG_XCODEPROJ_PATH)]:xcodeproj-path:_files -/'
        '(-x --xcconfig-path)'{-x,--xcconfig-path}'[The path to the .xcconfig file where build settings will be extracted. (env: TUIST_MIGRATION_SETTINGS_TO_XCCONFIG_XCCONFIG_PATH)]:xcconfig-path:_files -/'
        '(--target -t)'{--target,-t}'[The name of the target whose build settings will be extracted. When not passed, it extracts the build settings of the project. (env: TUIST_MIGRATION_SETTINGS_TO_XCCONFIG_TARGET)]:target:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_migration_check-empty-settings() {
    integer ret=1
    local -a args
    args+=(
        '(-p --xcodeproj-path)'{-p,--xcodeproj-path}'[The path to the Xcode project (env: TUIST_MIGRATION_CHECK_EMPTY_SETTINGS_XCODEPROJ_PATH)]:xcodeproj-path:_files -/'
        '(--target -t)'{--target,-t}'[The name of the target whose build settings will be checked. When not passed, it checks the build settings of the project. (env: TUIST_MIGRATION_CHECK_EMPTY_SETTINGS_TARGET)]:target:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_migration_list-targets() {
    integer ret=1
    local -a args
    args+=(
        '(-p --xcodeproj-path)'{-p,--xcodeproj-path}'[The path to the Xcode project (env: TUIST_MIGRATION_LIST_TARGETS_XCODEPROJ_PATH)]:xcodeproj-path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_plugin() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'archive:Archives a plugin into a NameOfPlugin.tuist-plugin.zip.'
                'build:Builds a plugin.'
                'run:Runs a plugin.'
                'test:Tests a plugin.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (archive)
                    _tuist_plugin_archive
                    ;;
                (build)
                    _tuist_plugin_build
                    ;;
                (run)
                    _tuist_plugin_run
                    ;;
                (test)
                    _tuist_plugin_test
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_plugin_archive() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory that contains the definition of the plugin. (env: TUIST_PLUGIN_ARCHIVE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_plugin_build() {
    integer ret=1
    local -a args
    args+=(
        '(--configuration -c)'{--configuration,-c}'[Choose configuration (default: debug). (env: TUIST_PLUGIN_OPTIONS_CONFIGURATION)]:configuration:(debug release)'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the definition of the plugin. (env: TUIST_PLUGIN_OPTIONS_PATH)]:path:_files -/'
        '--build-tests[Build both source and test targets. (env: TUIST_PLUGIN_BUILD_BUILD_TESTS)]'
        '--no-build-tests[Build both source and test targets. (env: TUIST_PLUGIN_BUILD_BUILD_TESTS)]'
        '--show-bin-path[Print the binary output path. (env: TUIST_PLUGIN_BUILD_SHOW_BIN_PATH)]'
        '--no-show-bin-path[Print the binary output path. (env: TUIST_PLUGIN_BUILD_SHOW_BIN_PATH)]'
        '*--targets[Build the specified targets. (env: TUIST_PLUGIN_BUILD_TARGETS)]:targets:'
        '*--products[Build the specified products. (env: TUIST_PLUGIN_BUILD_PRODUCTS)]:products:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_plugin_run() {
    integer ret=1
    local -a args
    args+=(
        '(--configuration -c)'{--configuration,-c}'[Choose configuration (default: debug). (env: TUIST_PLUGIN_OPTIONS_CONFIGURATION)]:configuration:(debug release)'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the definition of the plugin. (env: TUIST_PLUGIN_OPTIONS_PATH)]:path:_files -/'
        '--build-tests[Build both source and test targets. (env: TUIST_PLUGIN_RUN_BUILD_TESTS)]'
        '--no-build-tests[Build both source and test targets. (env: TUIST_PLUGIN_RUN_BUILD_TESTS)]'
        '--skip-build[Skip building the plugin. (env: TUIST_PLUGIN_RUN_SKIP_BUILD)]'
        '--no-skip-build[Skip building the plugin. (env: TUIST_PLUGIN_RUN_SKIP_BUILD)]'
        ':task:'
        ':arguments:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_plugin_test() {
    integer ret=1
    local -a args
    args+=(
        '(--configuration -c)'{--configuration,-c}'[Choose configuration (default: debug). (env: TUIST_PLUGIN_OPTIONS_CONFIGURATION)]:configuration:(debug release)'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the definition of the plugin. (env: TUIST_PLUGIN_OPTIONS_PATH)]:path:_files -/'
        '--build-tests[Build both source and test targets. (env: TUIST_PLUGIN_TEST_BUILD_TESTS)]'
        '--no-build-tests[Build both source and test targets. (env: TUIST_PLUGIN_TEST_BUILD_TESTS)]'
        '*--test-products[Test the specified products. (env: TUIST_PLUGIN_TEST_TEST_PRODUCTS)]:test-products:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_run() {
    integer ret=1
    local -a args
    args+=(
        ':runnable:'
        '--generate[Force the generation of the project before running. (env: TUIST_RUN_GENERATE)]'
        '--no-generate[Force the generation of the project before running. (env: TUIST_RUN_GENERATE)]'
        '--clean[When passed, it cleans the project before running. (env: TUIST_RUN_CLEAN)]'
        '--no-clean[When passed, it cleans the project before running. (env: TUIST_RUN_CLEAN)]'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project with the target or scheme to be run.]:path:_files -/'
        '(--configuration -C)'{--configuration,-C}'[The configuration to be used when building the scheme.]:configuration:'
        '--device[The simulator device name to run the target or scheme on.]:device:'
        '(--os -o)'{--os,-o}'[The OS version of the simulator. (env: TUIST_RUN_OS)]:os:'
        '--rosetta[When passed, append arch=x86_64 to the '"'"'destination'"'"' to run simulator in a Rosetta mode.]'
        ':arguments:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_scaffold() {
    integer ret=1
    local -a args
    args+=(
        ':template:'
        '--json[The output in JSON format (env: TUIST_SCAFFOLD_JSON)]'
        '--no-json[The output in JSON format (env: TUIST_SCAFFOLD_JSON)]'
        '(--path -p)'{--path,-p}'[The path to the folder where the template will be generated (Default: Current directory) (env: TUIST_SCAFFOLD_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'list:Lists available scaffold templates'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (list)
                    _tuist_scaffold_list
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_scaffold_list() {
    integer ret=1
    local -a args
    args+=(
        '--json[The output in JSON format (env: TUIST_SCAFFOLD_LIST_JSON)]'
        '--no-json[The output in JSON format (env: TUIST_SCAFFOLD_LIST_JSON)]'
        '(--path -p)'{--path,-p}'[The path where you want to list templates from (env: TUIST_SCAFFOLD_LIST_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_test() {
    integer ret=1
    local -a args
    args+=(
        ':scheme:'
        '(--clean -c)'{--clean,-c}'[When passed, it cleans the project before testing it. (env: TUIST_TEST_CLEAN)]'
        '--no-clean[When passed, it cleans the project before testing it. (env: TUIST_TEST_CLEAN)]'
        '(--path -p)'{--path,-p}'[The path to the directory that contains the project to be tested. (env: TUIST_TEST_PATH)]:path:_files -/'
        '(--device -d)'{--device,-d}'[Test on a specific device. (env: TUIST_TEST_DEVICE)]:device:'
        '--platform[Test on a specific platform. (env: TUIST_TEST_PLATFORM)]:platform:'
        '(--os -o)'{--os,-o}'[Test with a specific version of the OS. (env: TUIST_TEST_OS)]:os:'
        '--rosetta[When passed, append arch=x86_64 to the '"'"'destination'"'"' to run simulator in a Rosetta mode. (env: TUIST_TEST_ROSETTA)]'
        '--no-rosetta[When passed, append arch=x86_64 to the '"'"'destination'"'"' to run simulator in a Rosetta mode. (env: TUIST_TEST_ROSETTA)]'
        '(--configuration -C)'{--configuration,-C}'[The configuration to be used when testing the scheme. (env: TUIST_TEST_CONFIGURATION)]:configuration:'
        '--skip-ui-tests[When passed, it skips testing UI Tests targets. (env: TUIST_TEST_SKIP_UITESTS)]'
        '--no-skip-ui-tests[When passed, it skips testing UI Tests targets. (env: TUIST_TEST_SKIP_UITESTS)]'
        '(--result-bundle-path -T)'{--result-bundle-path,-T}'[Path where test result bundle will be saved. (env: TUIST_TEST_RESULT_BUNDLE_PATH)]:result-bundle-path:_files -/'
        '--derived-data-path[\[Deprecated\] Overrides the folder that should be used for derived data when testing a project. (env: TUIST_TEST_DERIVED_DATA_PATH)]:derived-data-path:_files -/'
        '--retry-count[\[Deprecated\] Tests will retry <number> of times until success. Example: if 1 is specified, the test will be retried at most once, hence it will run up to 2 times. (env: TUIST_TEST_RETRY_COUNT)]:retry-count:'
        '--test-plan[The test plan to run. (env: TUIST_TEST_TEST_PLAN)]:test-plan:'
        '--test-targets[The list of test identifiers you want to test. Expected format is TestTarget\[/TestClass\[/TestMethod\]\]. It is applied before --skip-testing (env: TUIST_TEST_TEST_TARGETS)]:test-targets:'
        '--skip-test-targets[The list of test identifiers you want to skip testing. Expected format is TestTarget\[/TestClass\[/TestMethod\]\]. (env: TUIST_TEST_SKIP_TEST_TARGETS)]:skip-test-targets:'
        '--filter-configurations[The list of configurations you want to test. It is applied before --skip-configuration (env: TUIST_TEST_CONFIGURATIONS)]:filter-configurations:'
        '--skip-configurations[The list of configurations you want to skip testing. (env: TUIST_TEST_SKIP_CONFIGURATIONS)]:skip-configurations:'
        '--binary-cache[Ignore binary cache and use sources only. (env: TUIST_TEST_BINARY_CACHE)]'
        '--no-binary-cache[Ignore binary cache and use sources only. (env: TUIST_TEST_BINARY_CACHE)]'
        '--selective-testing[Run all tests instead of selectively test only those that have changed since the last successful test run. (env: TUIST_TEST_SELECTIVE_TESTING)]'
        '--no-selective-testing[Run all tests instead of selectively test only those that have changed since the last successful test run. (env: TUIST_TEST_SELECTIVE_TESTING)]'
        '--generate-only[When passed, it generates the project and skips testing. This is useful for debugging purposes. (env: TUIST_TEST_GENERATE_ONLY)]'
        '--no-generate-only[When passed, it generates the project and skips testing. This is useful for debugging purposes. (env: TUIST_TEST_GENERATE_ONLY)]'
        ':passthrough-xcode-build-arguments:'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_share() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory that contains a Tuist or Xcode project with a buildable scheme that can output runnable artifacts.]:path:_files -/'
        ':apps:'
        '(--configuration -C)'{--configuration,-C}'[The configuration of the app to share. Ignored when the app paths are passed directly. (env: TUIST_SHARE_CONFIGURATION)]:configuration:'
        '*--platforms[The platforms (iOS, tvOS, visionOS, watchOS or macOS) to share the app for. Ignored when the app paths are passed directly. (env: TUIST_SHARE_PLATFORM)]:platforms:(iOS tvOS macOS visionOS watchOS)'
        '--derived-data-path[The derived data path to find the apps in. When absent, the system-configured one. (env: TUIST_SHARE_DERIVED_DATA_PATH)]:derived-data-path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'show:Show information about the specified project. Use --web flag to open the project in the browser.'
                'create:Create a new project.'
                'list:List projects you have access to.'
                'delete:Delete a Tuist project.'
                'tokens:Manage Tuist project tokens.'
                'update:Update project settings'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (show)
                    _tuist_project_show
                    ;;
                (create)
                    _tuist_project_create
                    ;;
                (list)
                    _tuist_project_list
                    ;;
                (delete)
                    _tuist_project_delete
                    ;;
                (tokens)
                    _tuist_project_tokens
                    ;;
                (update)
                    _tuist_project_update
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_project_show() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:_files -/'
        '--web[Open a project in the browser. (env: TUIST_PROJECT_SHOW_WEB)]'
        '--no-web[Open a project in the browser. (env: TUIST_PROJECT_SHOW_WEB)]'
        '(--path -p)'{--path,-p}'[The path to the Tuist project. (env: TUIST_PROJECT_SHOW_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_create() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:_files -/'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_CREATE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_list() {
    integer ret=1
    local -a args
    args+=(
        '--json[The output in JSON format. (env: TUIST_PROJECT_LIST_JSON)]'
        '--no-json[The output in JSON format. (env: TUIST_PROJECT_LIST_JSON)]'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_LIST_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_delete() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:_files -/'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_DELETE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_tokens() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'create:Create a new Tuist project token. You can save this token in the `TUIST_CONFIG_TOKEN` environment variable to authenticate requests against the Tuist API.'
                'list:List Tuist project tokens.'
                'revoke:Revoke Tuist project tokens.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (create)
                    _tuist_project_tokens_create
                    ;;
                (list)
                    _tuist_project_tokens_list
                    ;;
                (revoke)
                    _tuist_project_tokens_revoke
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_project_tokens_create() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_TOKEN_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_tokens_list() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_TOKEN_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_tokens_revoke() {
    integer ret=1
    local -a args
    args+=(
        ':project-token-id:'
        ':full-handle:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_PROJECT_TOKEN_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_project_update() {
    integer ret=1
    local -a args
    args+=(
        ':full-handle:'
        '--default-branch[Set the default branch name for the repository linked to the project.]:default-branch:'
        '(--path -p)'{--path,-p}'[The path to the Tuist project.]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'create:Create a new organization.'
                'list:List your organizations.'
                'delete:Delete a new organization.'
                'show:Show information about the specified organization.'
                'invite:Invite a new member to your organization.'
                'remove:A set of commands to remove members or cancel pending invitations.'
                'update:A set of commands to update the organization.'
                'billing:Open billing dashboard for the specified organization.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (create)
                    _tuist_organization_create
                    ;;
                (list)
                    _tuist_organization_list
                    ;;
                (delete)
                    _tuist_organization_delete
                    ;;
                (show)
                    _tuist_organization_show
                    ;;
                (invite)
                    _tuist_organization_invite
                    ;;
                (remove)
                    _tuist_organization_remove
                    ;;
                (update)
                    _tuist_organization_update
                    ;;
                (billing)
                    _tuist_organization_billing
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_organization_create() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_CREATE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_list() {
    integer ret=1
    local -a args
    args+=(
        '--json[The output in JSON format. (env: TUIST_ORGANIZATION_LIST_JSON)]'
        '--no-json[The output in JSON format. (env: TUIST_ORGANIZATION_LIST_JSON)]'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_LIST_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_delete() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:_files -/'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_DELETE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_show() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        '--json[The output in JSON format. (env: TUIST_ORGANIZATION_SHOW_JSON)]'
        '--no-json[The output in JSON format. (env: TUIST_ORGANIZATION_SHOW_JSON)]'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_SHOW_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_invite() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        ':email:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_INVITE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_remove() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'invite:Cancel pending invitation.'
                'member:Remove a member from your organization.'
                'sso:Remove the SSO provider for your organization.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (invite)
                    _tuist_organization_remove_invite
                    ;;
                (member)
                    _tuist_organization_remove_member
                    ;;
                (sso)
                    _tuist_organization_remove_sso
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_organization_remove_invite() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        ':email:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_REMOVE_INVITE_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_remove_member() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        ':username:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_REMOVE_MEMBER_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_remove_sso() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_REMOVE_SSO_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_update() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'member:Update a member from your organization.'
                'sso:Update the SSO provider for your organization.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (member)
                    _tuist_organization_update_member
                    ;;
                (sso)
                    _tuist_organization_update_sso
                    ;;
            esac
            ;;
    esac

    return ret
}

_tuist_organization_update_member() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        ':username:'
        '--role[The new member role (env: TUIST_ORGANIZATION_UPDATE_MEMBER_ROLE)]:role:(admin user)'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_UPDATE_MEMBER_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_update_sso() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        '--provider[The SSO provider to use. (env: TUIST_ORGANIZATION_UPDATE_SSO_PROVIDER)]:provider:(google)'
        '(--organization-id -o)'{--organization-id,-o}'[Organization ID for your SSO provider. For Google, this is your Google domain (for example, if your email is tuist@tuist.io, the domain would be tuist.io) (env: TUIST_ORGANIZATION_UPDATE_SSO_ORGANIZATION_ID)]:organization-id:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_UPDATE_SSO_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_organization_billing() {
    integer ret=1
    local -a args
    args+=(
        ':organization-name:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_ORGANIZATION_BILLING_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_auth() {
    integer ret=1
    local -a args
    args+=(
        '--email[Email to authenticate with. (env: TUIST_AUTH_EMAIL)]:email:'
        '--password[Password to authenticate with. (env: TUIST_AUTH_PASSWORD)]:password:'
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_AUTH_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_session() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_SESSION_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_logout() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path to the directory or a subdirectory of the project. (env: TUIST_LOGOUT_PATH)]:path:_files -/'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_tuist_help() {
    integer ret=1
    local -a args
    args+=(
        ':subcommands:'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}


_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
}

_tuist
